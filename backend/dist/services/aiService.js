"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAIAnalysis = generateAIAnalysis;
exports.checkAIProviders = checkAIProviders;
const localAIService_1 = require("./localAIService");
async function generateAIAnalysis(prompt, provider) {
    if (provider === "local") {
        const securePrompt = `Voc√™ √© um analista s√™nior de seguran√ßa cibern√©tica. Analise o log abaixo e gere um relat√≥rio detalhado.

IMPORTANTE: Gere o relat√≥rio EXATAMENTE no formato especificado abaixo, preenchendo apenas os campos para os quais h√° informa√ß√µes dispon√≠veis no log.

Log para an√°lise:
${prompt}

FORMATO OBRIGAT√ìRIO DO RELAT√ìRIO:

Prezados, (uma sauda√ß√£o).

Nossa equipe de monitoramento, identificou um evento relevante em seu ambiente. Seguem abaixo mais detalhes para valida√ß√£o.

üìÑ Caso de uso: [Descri√ß√£o do caso de uso baseado no log]

üïµ An√°lise: [An√°lise t√©cnica do evento de seguran√ßa]

üìä Fonte de dados utilizada na an√°lise: [Identifique a fonte do log, ex.: Windows Event Log, Syslog, Check Point SmartDefense]

üö® Severidade: [Classifique a severidade: Baixa, Moderada, Alta, Cr√≠tica]

üìã Detalhes do Evento:

Data do Log: [Data e hora do evento]
Fonte do Log: [Sistema ou componente que gerou o log]
Usu√°rio de Origem: [Usu√°rio associado, se aplic√°vel]
Usu√°rio Afetado: [Usu√°rio impactado, se aplic√°vel]
IP/Host de Origem: [IP ou host que gerou o evento]
IP/Host Afetado: [IP ou host impactado]
Localiza√ß√£o (Origem/Impactado): [Localiza√ß√£o geogr√°fica ou l√≥gica, se dispon√≠vel]
Tipo do Evento: [Tipo de evento, ex.: tentativa de explora√ß√£o, falha de autentica√ß√£o]
Grupo: [Categoria do evento, ex.: SmartDefense, Firewall]
Objeto: [Recurso alvo, ex.: SNMP, HTTP]
Nome do Objeto: [Nome espec√≠fico do recurso, ex.: bsnmpd]
Tipo do Objeto: [Tipo de recurso, ex.: Servi√ßo, Aplica√ß√£o]
Assunto: [Resumo do evento, ex.: SNMP Protection Violation]
Pol√≠tica: [Pol√≠tica ou configura√ß√£o relevante, se aplic√°vel]
Nome da Amea√ßa: [Nome da amea√ßa detectada, ex.: FreeBSD bsnmpd GETBULK PDU Stack Buffer Overflow]
Nome do Processo: [Processo envolvido, ex.: bsnmpd]
Nome da Regra MPE: [Regra que disparou o alerta, se aplic√°vel]
Mensagem do Fornecedor: [Mensagem ou c√≥digo de erro do sistema]
ID do Fornecedor: [Identificador √∫nico do evento, se dispon√≠vel]
Identificador de Navegador: [User-agent, se aplic√°vel]
A√ß√£o: [A√ß√£o tomada, ex.: Detect, Block, Alert]
Status: [Status da a√ß√£o, ex.: Bloqueado, Falha, Sucesso]
Resultado: [Resultado final, se aplic√°vel]
IOCs (Indicadores de Comprometimento): [Liste os IOCs identificados, se houver]

Mensagem de Log: [Mensagem original do log ou resumo]

üìå Justificativa para Abertura do Caso: [Explique por que este evento merece aten√ß√£o, considerando gravidade, contexto, recorr√™ncia, poss√≠veis riscos e rela√ß√£o com pol√≠ticas de seguran√ßa]

üõ° A√ß√£o tomada (caso tenha sido realizado o bloqueio de IP ou URL maliciosa, descrever brevemente a a√ß√£o executada): [Descreva a√ß√µes tomadas, se houver]

üõ† Recomenda√ß√£o: [Liste recomenda√ß√µes espec√≠ficas e acion√°veis]

Lembre-se: Mantenha o formato exato especificado acima e preencha apenas os campos para os quais h√° informa√ß√µes dispon√≠veis no log.`;
        const model = process.env.LOCAL_AI_MODEL || "llama2";
        return await localAIService_1.localAIService.generateResponse(securePrompt, model, {
            temperature: 0.3,
            top_p: 0.9
        });
    }
    else {
        throw new Error("Apenas IA local est√° dispon√≠vel. Use 'local' como provider.");
    }
}
async function checkAIProviders() {
    const result = {
        local: false,
        availableModels: []
    };
    try {
        const isLocalHealthy = await localAIService_1.localAIService.checkHealth();
        if (isLocalHealthy) {
            result.local = true;
            result.availableModels = await localAIService_1.localAIService.listModels();
        }
    }
    catch (error) {
        console.log("IA Local n√£o dispon√≠vel:", error);
    }
    return result;
}
//# sourceMappingURL=aiService.js.map